package com.mstarc.wearablemms.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mstarc.wearablemms.database.bean.JunkMMS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JUNK_MMS".
*/
public class JunkMMSDao extends AbstractDao<JunkMMS, Long> {

    public static final String TABLENAME = "JUNK_MMS";

    /**
     * Properties of entity JunkMMS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Snippet = new Property(1, String.class, "snippet", false, "SNIPPET");
        public final static Property Thread_id = new Property(2, int.class, "thread_id", false, "THREAD_ID");
        public final static Property Msg_count = new Property(3, String.class, "msg_count", false, "MSG_COUNT");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Date = new Property(5, long.class, "date", false, "DATE");
    }


    public JunkMMSDao(DaoConfig config) {
        super(config);
    }
    
    public JunkMMSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JUNK_MMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SNIPPET\" TEXT," + // 1: snippet
                "\"THREAD_ID\" INTEGER NOT NULL ," + // 2: thread_id
                "\"MSG_COUNT\" TEXT," + // 3: msg_count
                "\"ADDRESS\" TEXT," + // 4: address
                "\"DATE\" INTEGER NOT NULL );"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JUNK_MMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JunkMMS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(2, snippet);
        }
        stmt.bindLong(3, entity.getThread_id());
 
        String msg_count = entity.getMsg_count();
        if (msg_count != null) {
            stmt.bindString(4, msg_count);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JunkMMS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(2, snippet);
        }
        stmt.bindLong(3, entity.getThread_id());
 
        String msg_count = entity.getMsg_count();
        if (msg_count != null) {
            stmt.bindString(4, msg_count);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getDate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JunkMMS readEntity(Cursor cursor, int offset) {
        JunkMMS entity = new JunkMMS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // snippet
            cursor.getInt(offset + 2), // thread_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.getLong(offset + 5) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JunkMMS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSnippet(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setThread_id(cursor.getInt(offset + 2));
        entity.setMsg_count(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JunkMMS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JunkMMS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JunkMMS entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
